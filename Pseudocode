Pseudocode of the method
addPrerequisiteCourse ???????
  assign i to the length of the array 

generateStudentId()?????????????????????????
  assign initial value of studentId to 30000001
  increment studentId by 1

isEmailValid()
  for the length of the email
    if email contains "@" and "."
      if index of "@" is bigger than index of "."
        return false
      else
        if "@" is at index 0 or "." is at the last index of email
          return false
        else 
    
isZipCodeValid() //this assumes that the zipcode is from Canada
  if length of zip_code is equal to 6
    if character at index 3 is equal to " "
      if indexes 0, 2, and 5 are char
        if indexes 1, 3, and 6 are numbers
          return true
  else return false

computeFinalGrade(assessmentWeights: double[] )??????????????????????????????????

computeLetterGrades(fin : double ) 
  if fin >= 90
    assign letterGrade to 'A'
  else if fin >=80
    assign letterGrade to 'B'
  else if fin >=70
    assign letterGrade to 'C'
  else if fin >=60
    assign letterGrade to 'D'
  else
    assign letterGrade to 'F'
  return letterGrade

findArraySum(numbers : double[])
  set value of sum to 0
  for the length of numbers
    add value of the current index of the array to the sum
  return sum

findArrayMaximum(numbers : double[])
  set value of highest to 0
  for the length of numbers
    if the value of the current index of the array is higher than the current value of highest
      set that value to highest
  return highest

findArrayMinimum(numbers : double[])
  set value of lowest to 100
  for the length of numbers
    if the value of the current index of the array is lower than the current value of lowest
      set that value to lowest
  return lowest

findArrayAverage(numbers : double[])
  set value of sum to 0
  for the length of numbers
    add value of the current index of the array to the sum
  assign the value of average to sum / length of numbers
  return average

findArrayStandardDev(numbers double[]) 
  set sum and standardDeviation to 0
  set value of length to length of the array
  for the length of numbers
    add num to the sum
  assign mean to expression sem/length
  for the length of the array
    set value of standardDeviation to standardDeviation + (num - mean) to the power (2)
  return the square root of standardDeviation/length
    
findMaxAssessment(k : int )

findMinAssessment(k : int ) 

findAvgAssessment(k : int )

findStdevAssessment(k : int )

toStringMaxAssessments() 

toStringMinAssessments() 

toStringAvgAssessments() 

toStringStdevAssessments()

